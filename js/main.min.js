class DBHelper{static registerServiceWorker(){"serviceWorker"in navigator&&navigator.serviceWorker.register("mws-sw.js").then(function(){console.log("Registration worked!")}).catch(function(){console.log("Registration failed")})}static openDatabase(){return navigator.serviceWorker?idb.open("restaurants-db",1,function(upgradeDb){upgradeDb.createObjectStore("restaurants",{keyPath:"id"})}):Promise.resolve()}static openOfflineReviewsDatabase(){return navigator.serviceWorker?idb.open("offline-reviews",1,function(upgradeDb){upgradeDb.createObjectStore("offline-reviews",{keyPath:"restaurant_id"})}):Promise.resolve()}static saveRestaurants(restaurants){return DBHelper.openDatabase().then(function(db){if(!db)return;const store=db.transaction("restaurants","readwrite").objectStore("restaurants");for(let i=0;i<restaurants.length;i++)store.put(restaurants[i])})}static saveRestaurantWithReviews(restaurant,reviews){return DBHelper.openDatabase().then(function(db){if(db)return restaurant?(restaurant.reviews=reviews,restaurant.reviews=restaurant.reviews.map(function(review){return review.offline=void 0,review}),DBHelper.saveRestaurants([restaurant])):void 0})}static saveOfflineReview(review){return DBHelper.openOfflineReviewsDatabase().then(function(db){if(!db)return;db.transaction("offline-reviews","readwrite").objectStore("offline-reviews").put(review)})}static getCachedOfflineReviews(){return DBHelper.openOfflineReviewsDatabase().then(function(db){if(!db)return;return db.transaction("offline-reviews").objectStore("offline-reviews").getAll()})}static resendOfflineReviews(callback){DBHelper.getCachedOfflineReviews().then(offlineReviews=>{offlineReviews.forEach(review=>{DBHelper.sendReview(review,callback)}),DBHelper.clearOfflineReviews()})}static clearOfflineReviews(){DBHelper.openOfflineReviewsDatabase().then(db=>{db.transaction("offline-reviews","readwrite").objectStore("offline-reviews").clear()})}static getCachedRestaurants(callback){return DBHelper.openDatabase().then(function(db){if(!db)return;return db.transaction("restaurants").objectStore("restaurants").getAll().then(function(restaurants){restaurants&&callback(null,restaurants)})})}static getCachedRestaurant(restaurantId,callback){return DBHelper.openDatabase().then(function(db){if(!db)return;return db.transaction("restaurants").objectStore("restaurants").get(parseInt(restaurantId)).then(function(restaurant){if(!restaurant){callback(`Restaurant with id ${restaurantId} not found`,null)}return restaurant}).then(function(restaurant){restaurant&&DBHelper.getCachedOfflineReviews().then(reviews=>{const offlineReviews=reviews.filter(review=>review.restaurant_id==restaurant.id).map(function(review){return review.offline=!0,review});restaurant.reviews||(restaurant.reviews=[]),offlineReviews||(offlineReviews=[]),restaurant.reviews=restaurant.reviews.concat(offlineReviews),callback(null,restaurant)})})})}static get DATABASE_URL(){return"http://localhost:1337"}static get RESTAURANTS_URL(){return this.DATABASE_URL+"/restaurants"}static get REVIEWS_URL(){return this.DATABASE_URL+"/reviews/?restaurant_id="}static fetchRestaurants(callback){DBHelper.getCachedRestaurants(callback);let xhr=new XMLHttpRequest;xhr.open("GET",DBHelper.RESTAURANTS_URL),xhr.onload=(()=>{if(200===xhr.status){const restaurants=JSON.parse(xhr.responseText);DBHelper.saveRestaurants(restaurants),callback(null,restaurants)}else{const error=`Request failed. Returned status of ${xhr.status}`;callback(error,null)}}),xhr.send()}static fetchRestaurantById(id,callback){DBHelper.getCachedRestaurant(id,callback);let xhr=new XMLHttpRequest;xhr.open("GET",DBHelper.RESTAURANTS_URL+"/"+id),xhr.onload=(()=>{if(200===xhr.status){const restaurant=JSON.parse(xhr.responseText);restaurant?(DBHelper.fetchReviewsByRestaurant(restaurant,callback),callback(null,restaurant)):callback("Restaurant does not exist",null)}else{const error=`Request failed. Returned status of ${xhr.status}`;callback(error,null)}}),xhr.send()}static fetchReviewsByRestaurant(restaurant,callback){const id=restaurant.id;let xhr=new XMLHttpRequest;xhr.open("GET",DBHelper.REVIEWS_URL+id),xhr.onload=(()=>{if(200===xhr.status){const reviews=JSON.parse(xhr.responseText);reviews?DBHelper.saveRestaurantWithReviews(restaurant,reviews).then(()=>DBHelper.getCachedRestaurant(id,callback)):callback("Restaurant does not exist",null)}else{const error=`Request failed. Returned status of ${xhr.status}`;callback(error,null)}}),xhr.send()}static sendReview(review,callback){return fetch(`${DBHelper.DATABASE_URL}/reviews`,{body:JSON.stringify(review),cache:"no-cache",credentials:"same-origin",headers:{"content-type":"application/json"},method:"POST",mode:"no-cors",redirect:"follow",referrer:"no-referrer"}).then(response=>DBHelper.fetchRestaurantById(review.restaurant_id,callback)).catch(error=>{review.createdAt=(new Date).getTime(),DBHelper.saveOfflineReview(review)})}static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results)}})}static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results)}})}static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{let results=restaurants;"all"!=cuisine&&(results=results.filter(r=>r.cuisine_type==cuisine)),"all"!=neighborhood&&(results=results.filter(r=>r.neighborhood==neighborhood)),callback(null,results)}})}static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood),uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i);callback(null,uniqueNeighborhoods)}})}static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type),uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i);callback(null,uniqueCuisines)}})}static buildSrcSet(restaurant,altText){const path="images_src/"+restaurant.photograph;return`\n    <source media="(min-width:900px)" \n      srcset="${path}-large_x1.jpg 1x, ${path}-large_x2.jpg 2x">\n    <source media="(max-width: 900px) and (min-width: 600px)" \n      srcset="${path}-medium_x1.jpg 1x, ${path}-medium_x2.jpg 2x">\n    <source media="(max-width: 600px)"\n      srcset="${path}-small_x1.jpg 1x, ${path}-small_x2.jpg 2x">\n    <img class="restaurant-img" src="${DBHelper.imageUrlForRestaurant(restaurant)}" alt="${altText}">\n  `}static urlForRestaurant(restaurant){return`./restaurant.html?id=${restaurant.id}`}static imageUrlForRestaurant(restaurant){return`/img/${restaurant.photograph}.jpg`}static mapMarkerForRestaurant(restaurant,map){return new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map:map,animation:google.maps.Animation.DROP})}}let restaurants,neighborhoods,cuisines;var map,markers=[];document.addEventListener("DOMContentLoaded",event=>{fetchNeighborhoods(),fetchCuisines()}),window.onload=(()=>{DBHelper.registerServiceWorker()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((error,neighborhoods)=>{error?console.error(error):(self.neighborhoods=neighborhoods,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((neighborhoods=self.neighborhoods)=>{const select=document.getElementById("neighborhoods-select");neighborhoods.forEach(neighborhood=>{const option=document.createElement("option");option.innerHTML=neighborhood,option.value=neighborhood,select.append(option)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((error,cuisines)=>{error?console.error(error):(self.cuisines=cuisines,fillCuisinesHTML())})}),fillCuisinesHTML=((cuisines=self.cuisines)=>{const select=document.getElementById("cuisines-select");cuisines.forEach(cuisine=>{const option=document.createElement("option");option.innerHTML=cuisine,option.value=cuisine,select.append(option)})}),window.initMap=(()=>{self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()}),updateRestaurants=(()=>{const cSelect=document.getElementById("cuisines-select"),nSelect=document.getElementById("neighborhoods-select"),cIndex=cSelect.selectedIndex,nIndex=nSelect.selectedIndex,cuisine=cSelect[cIndex].value,neighborhood=nSelect[nIndex].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,(error,restaurants)=>{error?console.error(error):(resetRestaurants(restaurants),fillRestaurantsHTML())})}),resetRestaurants=(restaurants=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(m=>m.setMap(null)),self.markers=[],self.restaurants=restaurants}),fillRestaurantsHTML=((restaurants=self.restaurants)=>{const ul=document.getElementById("restaurants-list");restaurants.forEach(restaurant=>{ul.append(createRestaurantHTML(restaurant))}),addMarkersToMap()}),createRestaurantHTML=(restaurant=>{const li=document.createElement("li");li.classList.add("material-element");const image=document.createElement("picture");image.insertAdjacentHTML("beforeend",DBHelper.buildSrcSet(restaurant,restaurant.name+" descriptive image")),li.append(image);const restaurantContent=document.createElement("div");restaurantContent.className="restaurant-content",li.append(restaurantContent);const name=document.createElement("h1");name.innerHTML=restaurant.name,restaurantContent.append(name);const neighborhood=document.createElement("p");neighborhood.innerHTML=restaurant.neighborhood,restaurantContent.append(neighborhood);const address=document.createElement("p");address.innerHTML=restaurant.address,restaurantContent.append(address);const more=document.createElement("a");return more.innerHTML="View Details",more.setAttribute("role","button"),more.setAttribute("aria-label",restaurant.name+".  View Details"),more.href=DBHelper.urlForRestaurant(restaurant),restaurantContent.append(more),li}),addMarkersToMap=((restaurants=self.restaurants)=>{restaurants.forEach(restaurant=>{const marker=DBHelper.mapMarkerForRestaurant(restaurant,self.map);google.maps.event.addListener(marker,"click",()=>{window.location.href=marker.url}),self.markers.push(marker)})});