class DBHelper{static registerServiceWorker(){"serviceWorker"in navigator&&navigator.serviceWorker.register("mws-sw.js").then(function(){console.log("Registration worked!")}).catch(function(){console.log("Registration failed")})}static openDatabase(){return navigator.serviceWorker?idb.open("restaurants-db",1,function(upgradeDb){upgradeDb.createObjectStore("restaurants",{keyPath:"id"})}):Promise.resolve()}static openOfflineReviewsDatabase(){return navigator.serviceWorker?idb.open("offline-reviews",1,function(upgradeDb){upgradeDb.createObjectStore("offline-reviews",{keyPath:"restaurant_id"})}):Promise.resolve()}static saveRestaurants(restaurants){return DBHelper.openDatabase().then(function(db){if(!db)return;const store=db.transaction("restaurants","readwrite").objectStore("restaurants");for(let i=0;i<restaurants.length;i++)store.put(restaurants[i])})}static saveRestaurantWithReviews(restaurant,reviews){return DBHelper.openDatabase().then(function(db){if(db)return restaurant?(restaurant.reviews=reviews,restaurant.reviews=restaurant.reviews.map(function(review){return review.offline=void 0,review}),DBHelper.saveRestaurants([restaurant])):void 0})}static saveOfflineReview(review){return DBHelper.openOfflineReviewsDatabase().then(function(db){if(!db)return;db.transaction("offline-reviews","readwrite").objectStore("offline-reviews").put(review)})}static getCachedOfflineReviews(){return DBHelper.openOfflineReviewsDatabase().then(function(db){if(!db)return;return db.transaction("offline-reviews").objectStore("offline-reviews").getAll()})}static resendOfflineReviews(callback){DBHelper.getCachedOfflineReviews().then(offlineReviews=>{offlineReviews.forEach(review=>{DBHelper.sendReview(review,callback)}),DBHelper.clearOfflineReviews()})}static clearOfflineReviews(){DBHelper.openOfflineReviewsDatabase().then(db=>{db.transaction("offline-reviews","readwrite").objectStore("offline-reviews").clear()})}static getCachedRestaurants(callback){return DBHelper.openDatabase().then(function(db){if(!db)return;return db.transaction("restaurants").objectStore("restaurants").getAll().then(function(restaurants){restaurants&&callback(null,restaurants)})})}static getCachedRestaurant(restaurantId,callback){return DBHelper.openDatabase().then(function(db){if(!db)return;return db.transaction("restaurants").objectStore("restaurants").get(parseInt(restaurantId)).then(function(restaurant){if(!restaurant){callback(`Restaurant with id ${restaurantId} not found`,null)}return restaurant}).then(function(restaurant){restaurant&&DBHelper.getCachedOfflineReviews().then(reviews=>{const offlineReviews=reviews.filter(review=>review.restaurant_id==restaurant.id).map(function(review){return review.offline=!0,review});restaurant.reviews||(restaurant.reviews=[]),offlineReviews||(offlineReviews=[]),restaurant.reviews=restaurant.reviews.concat(offlineReviews),callback(null,restaurant)})})})}static get DATABASE_URL(){return"http://localhost:1337"}static get RESTAURANTS_URL(){return this.DATABASE_URL+"/restaurants"}static get REVIEWS_URL(){return this.DATABASE_URL+"/reviews/?restaurant_id="}static fetchRestaurants(callback){DBHelper.getCachedRestaurants(callback);let xhr=new XMLHttpRequest;xhr.open("GET",DBHelper.RESTAURANTS_URL),xhr.onload=(()=>{if(200===xhr.status){const restaurants=JSON.parse(xhr.responseText);DBHelper.saveRestaurants(restaurants),callback(null,restaurants)}else{const error=`Request failed. Returned status of ${xhr.status}`;callback(error,null)}}),xhr.send()}static fetchRestaurantById(id,callback){DBHelper.getCachedRestaurant(id,callback);let xhr=new XMLHttpRequest;xhr.open("GET",DBHelper.RESTAURANTS_URL+"/"+id),xhr.onload=(()=>{if(200===xhr.status){const restaurant=JSON.parse(xhr.responseText);restaurant?(DBHelper.fetchReviewsByRestaurant(restaurant,callback),callback(null,restaurant)):callback("Restaurant does not exist",null)}else{const error=`Request failed. Returned status of ${xhr.status}`;callback(error,null)}}),xhr.send()}static fetchReviewsByRestaurant(restaurant,callback){const id=restaurant.id;let xhr=new XMLHttpRequest;xhr.open("GET",DBHelper.REVIEWS_URL+id),xhr.onload=(()=>{if(200===xhr.status){const reviews=JSON.parse(xhr.responseText);reviews?DBHelper.saveRestaurantWithReviews(restaurant,reviews).then(()=>DBHelper.getCachedRestaurant(id,callback)):callback("Restaurant does not exist",null)}else{const error=`Request failed. Returned status of ${xhr.status}`;callback(error,null)}}),xhr.send()}static sendReview(review,callback){return fetch(`${DBHelper.DATABASE_URL}/reviews`,{body:JSON.stringify(review),cache:"no-cache",credentials:"same-origin",headers:{"content-type":"application/json"},method:"POST",mode:"no-cors",redirect:"follow",referrer:"no-referrer"}).then(response=>DBHelper.fetchRestaurantById(review.restaurant_id,callback)).catch(error=>{review.createdAt=(new Date).getTime(),DBHelper.saveOfflineReview(review)})}static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results)}})}static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results)}})}static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{let results=restaurants;"all"!=cuisine&&(results=results.filter(r=>r.cuisine_type==cuisine)),"all"!=neighborhood&&(results=results.filter(r=>r.neighborhood==neighborhood)),callback(null,results)}})}static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood),uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i);callback(null,uniqueNeighborhoods)}})}static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type),uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i);callback(null,uniqueCuisines)}})}static buildSrcSet(restaurant,altText){const path="images_src/"+restaurant.photograph;return`\n    <source media="(min-width:900px)" \n      srcset="${path}-large_x1.jpg 1x, ${path}-large_x2.jpg 2x">\n    <source media="(max-width: 900px) and (min-width: 600px)" \n      srcset="${path}-medium_x1.jpg 1x, ${path}-medium_x2.jpg 2x">\n    <source media="(max-width: 600px)"\n      srcset="${path}-small_x1.jpg 1x, ${path}-small_x2.jpg 2x">\n    <img class="restaurant-img" src="${DBHelper.imageUrlForRestaurant(restaurant)}" alt="${altText}">\n  `}static urlForRestaurant(restaurant){return`./restaurant.html?id=${restaurant.id}`}static imageUrlForRestaurant(restaurant){return`/img/${restaurant.photograph}.jpg`}static mapMarkerForRestaurant(restaurant,map){return new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map:map,animation:google.maps.Animation.DROP})}}let restaurant;var map;window.initMap=(()=>{fetchRestaurantFromURL((error,restaurant)=>{error?console.error(error):(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:restaurant.latlng,scrollwheel:!1}),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.map)),DBHelper.resendOfflineReviews((error,restaurant)=>{self.restaurant=restaurant,restaurant?fillRestaurantHTML():console.error(error)})});const form=document.getElementById("review-form");form&&form.addEventListener("submit",function(event){event.preventDefault();const review={restaurant_id:self.restaurant.id},formdata=new FormData(form);for(let[key,value]of formdata.entries())review[key]=value;DBHelper.sendReview(review).then(data=>{const ul=document.getElementById("reviews-list");review.offline=!0,ul.appendChild(createReviewHTML(review)),form.reset()}).catch(error=>console.error(error))})}),window.onload=(()=>{DBHelper.registerServiceWorker()}),fetchRestaurantFromURL=(callback=>{if(self.restaurant)return void callback(null,self.restaurant);const id=getParameterByName("id");id?DBHelper.fetchRestaurantById(id,(error,restaurant)=>{self.restaurant=restaurant,restaurant?(fillRestaurantHTML(),callback(null,restaurant)):console.error(error)}):(error="No restaurant id in URL",callback(error,null))}),fillRestaurantHTML=((restaurant=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=restaurant.name,document.getElementById("restaurant-address").innerHTML=restaurant.address;const image=document.getElementById("restaurant-img");for(;image.firstChild;)image.removeChild(image.firstChild);image.insertAdjacentHTML("beforeend",DBHelper.buildSrcSet(restaurant,restaurant.name+" descriptive image.")),document.getElementById("restaurant-cuisine").innerHTML=restaurant.cuisine_type,restaurant.operating_hours&&fillRestaurantHoursHTML(),fillReviewsHTML()}),fillRestaurantHoursHTML=((operatingHours=self.restaurant.operating_hours)=>{const hours=document.getElementById("restaurant-hours");for(;hours.firstChild;)hours.removeChild(hours.firstChild);for(let key in operatingHours){const row=document.createElement("tr"),day=document.createElement("td");day.innerHTML=key,row.appendChild(day);const time=document.createElement("td");time.innerHTML=operatingHours[key],row.appendChild(time),hours.appendChild(row)}}),fillReviewsHTML=((reviews=self.restaurant.reviews)=>{const container=document.getElementById("reviews-container");for(;container.firstChild;)container.removeChild(container.firstChild);const title=document.createElement("h2");title.innerHTML="Reviews",title.style.width="100%",container.appendChild(title);const reviewList=document.createElement("ul");if(reviewList.id="reviews-list",!reviews){const noReviews=document.createElement("p");return noReviews.innerHTML="No reviews yet!",void container.appendChild(noReviews)}reviews.forEach(review=>{reviewList.appendChild(createReviewHTML(review))}),container.appendChild(reviewList)}),createReviewHTML=(review=>{const li=document.createElement("li");li.classList.add("material-element");const reviewHeader=document.createElement("div");reviewHeader.classList.add("review-header-container"),li.appendChild(reviewHeader);const name=document.createElement("p");name.innerHTML=review.name,name.classList.add("review-name"),reviewHeader.appendChild(name);const date=document.createElement("p");review.offline?date.innerHTML="Not synchronized yet with the server":date.innerHTML=new Date(review.createdAt).toLocaleString(),date.classList.add("review-date"),reviewHeader.appendChild(date);const reviewContent=document.createElement("div");reviewContent.classList.add("review-content-container"),li.appendChild(reviewContent);const rating=document.createElement("p");review.rating>=5?rating.classList.add("very-good-review"):4==review.rating?rating.classList.add("good-review"):review.rating<=2?rating.classList.add("bad-review"):rating.classList.add("not-bad-review"),rating.innerHTML=`Rating: ${review.rating}`,rating.classList.add("review-rating"),reviewContent.appendChild(rating);const comments=document.createElement("p");return comments.innerHTML=review.comments,comments.classList.add("review-comments"),reviewContent.appendChild(comments),li}),fillBreadcrumb=((restaurant=self.restaurant)=>{const breadcrumb=document.getElementById("breadcrumb");for(;breadcrumb.firstChild;)breadcrumb.removeChild(breadcrumb.firstChild);const homeLi=document.createElement("li");homeLi.innerHTML='<a href="/">Home</a>';const restaurantLi=document.createElement("li");restaurantLi.innerHTML=restaurant.name,breadcrumb.appendChild(homeLi),breadcrumb.appendChild(restaurantLi)}),getParameterByName=((name,url)=>{url||(url=window.location.href),name=name.replace(/[\[\]]/g,"\\$&");const results=new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`).exec(url);return results?results[2]?decodeURIComponent(results[2].replace(/\+/g," ")):"":null});